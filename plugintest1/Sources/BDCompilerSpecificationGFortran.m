/*
	BDCompilerSpecificationGFortran.m - FortranPlugin
	Copyright 2006-2008 Damien Bobillot.
	Distributed under the GPL v3 licence.
*/

#import "BDCompilerSpecificationGFortran.h"
//#import "XCPBuildSystem.h"
//#import "XCPDependencyGraph.h"
//#import "XCPSupport.h"

@implementation BDCompilerSpecificationGFortran
- (NSArray*) computeDependenciesForInputFile:(NSString*)input ofType:(PBXFileType*)type
    variant:(NSString*)variant architecture:(NSString*)arch
    outputDirectory:(NSString*)outputDir
    inTargetBuildContext:(PBXTargetBuildContext*)context
{
	if(![context expandedValueIsNonEmptyForString:@"$(gfortran_not_first_source)"]) {
		[context setStringValue:@"YES" forDynamicSetting:@"gfortran_not_first_source"];
		
		// Setup gfortran base path
		NSString* gfortranBasePath = [[NSUserDefaults standardUserDefaults] stringForKey:@"DBGFortranBasePath"];
		if(gfortranBasePath == nil) gfortranBasePath = @"/usr/local";
		[context setStringValue:gfortranBasePath forDynamicSetting:@"GFORTRAN_BASE_PATH"];

		// Add standard libraries to linker phase
		if(![context expandedBooleanValueForString:@"$(GFORTRAN_AUTO_DONT_ADD_LINKER_ARGS)"]) {
			if([context expandedBooleanValueForString:@"$(ZERO_LINK)"]) {
				// With Zero-link
				NSEnumerator* e = [[self arrayForKey:@"StandardLibsForZeroLink"] objectEnumerator];
				NSString* lib;
				while((lib = [e nextObject]) != nil) {
					lib = [context expandedValueForString:lib];
					if([[NSFileManager defaultManager] fileExistsAtPath:lib]) {
						NSString* dstLinkPath = [context expandedValueForString:[outputDir stringByAppendingPathComponent:[lib lastPathComponent]]];
						[context defineSymlinkContents:lib forAuxiliarySymlinkAtPath:dstLinkPath];
						[context appendStringOrStringListValue:dstLinkPath toDynamicSetting:@"object_files"];
					}
				}
				
			} else {
				// Without Zero-link
				NSEnumerator* e = [[self arrayForKey:
#if defined(__i386__)
													@"StandardLibsForIntel"
#else
													@"StandardLibsForPPC"
#endif
																		] objectEnumerator];
				NSString* lib;
				while((lib = [e nextObject]) != nil) {
					if([[NSFileManager defaultManager] fileExistsAtPath:[context expandedValueForString:lib]])
						[context appendStringOrStringListValue:lib toDynamicSetting:@"object_files"];
				}
			}
		}
	}
	
	// compute input path (for variable substitution)
    input = [context expandedValueForString:input];
    
    // compute output path
    NSString* output = [outputDir stringByAppendingPathComponent:[[[input lastPathComponent] stringByDeletingPathExtension] stringByAppendingPathExtension:@"o"]];
    output = [context expandedValueForString:output];
    
    // create dependency nodes
    XCDependencyNode* outputNode = [context dependencyNodeForName:output createIfNeeded:YES];
    XCDependencyNode* inputNode = [context dependencyNodeForName:input createIfNeeded:YES];
    
    // create compiler command
    XCDependencyCommand* dep = [context
        createCommandWithRuleInfo:[NSArray arrayWithObjects:@"FortranCompile",[context naturalPathForPath:input],nil]
        commandPath:[context expandedValueForString:[self path]]
        arguments:nil
        forNode:outputNode];
    [dep setToolSpecification:self];
    [dep addArgumentsFromArray:[self commandLineForAutogeneratedOptionsInTargetBuildContext:context]];
    [dep addArgumentsFromArray:[[context expandedValueForString:@"$(build_file_compiler_flags)"] arrayByParsingAsStringList]];
    [dep addArgument:@"-o"];
    [dep addArgument:output];
    [dep addArgument:input];
    
    // create dependency rules
    [outputNode addDependedNode:inputNode];

    // update source-compiled links
    [context setCompiledFilePath:output forSourceFilePath:input];
    
	// force the use of gcc4 as the linker tool
	[context setStringValue:@"c" forDynamicSetting:@"gcc_language_dialect"];
	[context setStringValue:@"com.apple.compilers.gcc.4_0" forDynamicSetting:[context expandedValueForString:@"gcc_compilers_used_$(arch)"]];
	
    // return output object node (Xcode will automaticaly add .o files to $(object_files))
    return [NSArray arrayWithObject:outputNode];
}
@end
